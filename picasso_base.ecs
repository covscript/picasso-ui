package picasso_base

import imgui, regex

class event
    var listeners = new array
    function add_listener(func : function)
        listeners.push_front(func)
    end
    function activate(...args)
        foreach func in listeners
            if func(args...) == true
                return true
            end
        end
        return false
    end
end

class base_view
    var id = new string
    var app = null
    var base_type = "picasso.base_view"
    var on_render = new event
    function initialize()
        # TODO
    end
    function on_create()
        # TODO
    end
    function on_draw()
        # TODO
    end
    function render()
        on_render.activate(this)
        on_draw()
    end
end

# Activities

class simple_activity extends base_view
    var draw_list = new array
    var views = new hash_map
    # Modifiable Attributes
    var enable_menu = false
    var font = null
    # Events
    var on_focus = new event
    var on_lost = new event
    # Methods
    function add_view(v)
        if v->base_type == "picasso.activity_view"
            views.insert(v->id, v)
            draw_list.push_back(v)
            return true
        else
            return false
        end
    end
    function get_view_by_id(id)
        if views.exist(id)
            return views.at(id)
        else
            return null
        end
    end
    function on_menu_present()
        # TODO
    end
    function on_draw() override
        foreach it in draw_list
            it->render()
        end
    end
    function render() override
        if font != null
            imgui.push_font(font)
        end
        if enable_menu && imgui.begin_main_menu_bar()
            on_menu_present()
            imgui.end_main_menu_bar()
        end
        this.on_render.activate(this)
        on_draw()
        if font != null
            imgui.pop_font()
        end
    end
end

class activity_view extends base_view
    function initialize() override
        this.base_type = "picasso.activity_view"
    end
end

# Windows

class simple_window extends activity_view
    var draw_list = new array
    var views = new hash_map
    var win_opened = false
    var win_flags = {imgui.flags.no_collapse}
    # Modifiable Attributes
    var title = "Picasso Window"
    var enable_menu = false
    var font = null
    # Events
    var on_show = new event
    var on_close = new event
    # Methods
    function add_view(v)
        if v->base_type == "picasso.window_view"
            views.insert(v->id, v)
            draw_list.push_back(v)
            return true
        else
            return false
        end
    end
    function get_view_by_id(id)
        if views.exist(id)
            return views.at(id)
        else
            return null
        end
    end
    function add_flag(f)
        win_flags.push_back(f)
    end
    function show()
        win_opened = true
        on_show.activate(this)
    end
    function is_opened()
        return win_opened
    end
    function on_menu_present()
        # TODO
    end
    function on_draw() override
        foreach it in draw_list
            it->render()
        end
    end
    function render() override
        if win_opened
            imgui.begin_window(title, win_opened, win_flags)
            if !win_opened
                on_close.activate(win_opened)
            end
            if font != null
                imgui.push_font(font)
            end
            if enable_menu && imgui.begin_menu_bar()
                on_menu_present()
                imgui.end_menu_bar()
            end
            imgui.set_window_focus()
            this.on_render.activate(this)
            on_draw()
            if font != null
                imgui.pop_font()
            end
            imgui.end_window()
        end
    end
end

class window_view extends base_view
    function initialize() override
        this.base_type = "picasso.window_view"
    end
end

# Layout

class linear_layout extends window_view
    var draw_list = new array
    var views = new hash_map
    # Methods
    function add_view(v)
        if v->base_type == "picasso.window_view"
            views.insert(v->id, v)
            draw_list.push_back(v)
            return true
        else
            return false
        end
    end
    function get_view_by_id(id)
        if views.exist(id)
            return views.at(id)
        else
            return null
        end
    end
    function on_draw() override
        foreach it in draw_list
            it->render()
        end
    end
end

# Application

struct application
    var id_pool = new hash_set
    var views = new hash_map
    var stack = new array
    # Modifiable Attributes
    var enable_menu = false
    var imgui_app = null
    # Events
    var on_close = new event
    # ECS Constructor
    function construct_s(app, opt : boolean)
        imgui_app := app
        enable_menu = opt
    end
    function construct(...args)
        switch args.size
            case 0
                return
            end
            case 1
                imgui_app := args[0]
            end
            default
               construct_s(args...) 
            end
        end
    end
    function gen_uid()
        var uid = null
        loop
            uid = "View" + math.randint(id_pool.size, (id_pool.size + 1) * 10)
        until !id_pool.exist(uid)
        id_pool.insert(uid)
        return uid
    end
    function make_view_s(t, id, args)
        var v = new t{args...}
        v.id = id
        v.app = &this
        v.on_create()
        return &v
    end
    function make_view(...args)
        if args.size == 1
            return make_view_s(args[0], gen_uid(), {})
        else if args.size == 2
            return make_view_s(args[0], args[1], {})
        else if args.size == 3
            return make_view_s(args...)
        else
            return null
        end
    end
    function add_activity(...args)
        var act = make_view(args...)
        views.insert(act->id, act)
        return act
    end
    function get_view_by_id(id)
        if views.exist(id)
            return views.at(id)
        else
            return null
        end
    end
    function push(...args)
        if args.empty()
            return
        end
        link id = args.pop_front()
        if views.exist(id)
            if !stack.empty()
                stack.front->on_lost.activate(*stack.front)
            end
            link act = views.at(id)
            act->on_focus.activate(*act, args...)
            stack.push_front(act)
        end
    end
    function pop(...args)
        if !stack.empty()
            stack.front->on_lost.activate(*stack.front)
            stack.pop_front()
            if !stack.empty()
                stack.front->on_focus.activate(*stack.front, args...)
            end
        end
    end
    function start()
        loop
            if imgui_app.is_closed()
                on_close.activate(this)
                break
            end
            imgui_app.prepare()
            if !stack.empty()
                stack.front->render()
            end
            imgui_app.render()
        end
    end
end