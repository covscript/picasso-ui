# Generated by Extended CovScript Compiler
# DO NOT MODIFY
# Date: Tue May 18 20:12:06 2021
import ecs
package picasso_base
import imgui
import regex
class event
	var listeners = new array
	function add_listener(func)
		listeners.push_front(func)
	end
	function activate(...args)
		foreach func in listeners
			if func(args...) == true
				return true
			end
		end
		return false
	end
end
class base_view
	var id = new string
	var app = null
	var base_type = "picasso.base_view"
	var on_render = new event
	function initialize()
	end
	function on_create()
	end
	function on_draw()
	end
	function render()
		on_render.activate(this)
		on_draw()
	end
end
class simple_activity extends base_view
	var draw_list = new array
	var views = new hash_map
	var enable_menu = false
	var font = null
	var on_present = new event
	var on_focus = new event
	var on_lost = new event
	function add_view(v)
		if v->base_type == "picasso.activity_view"
			views.insert(v->id, v)
			draw_list.push_back(v)
			return true
		else
			return false
		end
	end
	function get_view_by_id(id)
		if views.exist(id)
			return views.at(id)
		else
			return null
		end
	end
	function on_menu_present()
	end
	function on_draw() override
		if font != null
			imgui.push_font(font)
		end
		if enable_menu && imgui.begin_main_menu_bar()
			on_menu_present()
			imgui.end_main_menu_bar()
		end
		on_present.activate(this)
		foreach it in draw_list
			it->render()
		end
		if font != null
			imgui.pop_font()
		end
	end
end
class activity_view extends base_view
	function initialize() override
		this.base_type = "picasso.activity_view"
	end
end
class simple_window extends activity_view
	var draw_list = new array
	var views = new hash_map
	var win_opened = false
	var win_flags = {imgui.flags.no_collapse}
	var title = "Picasso Window"
	var enable_menu = false
	var font = null
	var on_show = new event
	var on_close = new event
	var on_present = new event
	function add_view(v)
		if v->base_type == "picasso.window_view"
			views.insert(v->id, v)
			draw_list.push_back(v)
			return true
		else
			return false
		end
	end
	function get_view_by_id(id)
		if views.exist(id)
			return views.at(id)
		else
			return null
		end
	end
	function add_flag(f)
		win_flags.push_back(f)
	end
	function show()
		win_opened = true
		on_show.activate(this)
	end
	function is_opened()
		return win_opened
	end
	function on_menu_present()
	end
	function on_draw() override
		if win_opened
			imgui.begin_window(title, win_opened, win_flags)
			if !win_opened
				on_close.activate(win_opened)
			end
			if font != null
				imgui.push_font(font)
			end
			if enable_menu && imgui.begin_menu_bar()
				on_menu_present()
				imgui.end_menu_bar()
			end
			on_present.activate(this)
			foreach it in draw_list
				it->render()
			end
			if font != null
				imgui.pop_font()
			end
			imgui.end_window()
		end
	end
end
class window_view extends base_view
	function initialize() override
		this.base_type = "picasso.window_view"
	end
end
class linear_layout extends window_view
	var draw_list = new array
	var views = new hash_map
	function add_view(v)
		if v->base_type == "picasso.window_view"
			views.insert(v->id, v)
			draw_list.push_back(v)
			return true
		else
			return false
		end
	end
	function get_view_by_id(id)
		if views.exist(id)
			return views.at(id)
		else
			return null
		end
	end
	function on_draw() override
		foreach it in draw_list
			it->render()
		end
	end
end
struct application
	var id_pool = new hash_set
	var views = new hash_map
	var stack = new array
	var enable_menu = false
	var imgui_app = null
	var on_close = new event
	function construct_s(app, opt)
		ecs.check_type("opt", opt, boolean)
		imgui_app := app
		enable_menu = opt
	end
	function construct(...args)
		switch args.size
			case 0
				return
			end
			case 1
				imgui_app := args[0]
			end
			default
				construct_s(args...)
			end
		end
	end
	function gen_uid()
		var uid = null
		loop
			uid = "View" + math.randint(id_pool.size, (id_pool.size + 1)*10)
		until !id_pool.exist(uid)
		id_pool.insert(uid)
		return uid
	end
	function make_view_s(t, id, args)
		var v = null
		if args.empty()
			v = new t
		else
			v = ecs.param_new(t, {args...})
		end
		v.id = id
		v.app = &this
		v.on_create()
		return &v
	end
	function make_view(...args)
		if args.size == 1
			return make_view_s(args[0], gen_uid(), {})
		else
			if args.size == 2
				return make_view_s(args[0], args[1], {})
			else
				if args.size == 3
					return make_view_s(args...)
				else
					return null
				end
			end
		end
	end
	function add_activity(...args)
		var act = make_view(args...)
		views.insert(act->id, act)
		return act
	end
	function get_view_by_id(id)
		if views.exist(id)
			return views.at(id)
		else
			return null
		end
	end
	function push(id)
		if views.exist(id)
			if !stack.empty()
				stack.front->on_lost.activate(*stack.front)
			end
			link act = views.at(id)
			act->on_focus.activate(*act)
			stack.push_front(act)
		end
	end
	function pop(...args)
		if !stack.empty()
			stack.front->on_lost.activate(*stack.front)
			stack.pop_front()
			if !stack.empty()
				stack.front->on_focus.activate(*stack.front, args...)
			end
		end
	end
	function start()
		loop
			if imgui_app.is_closed()
				on_close.activate(this)
				break
			end
			imgui_app.prepare()
			if !stack.empty()
				stack.front->render()
			end
			imgui_app.render()
		end
	end
end

